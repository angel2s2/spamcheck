#!/bin/sh
# 
# 
SCRIPT_NAME='spam-check'
VERSION='0.3.5'
DESCRIPTION='SpamCheck - скрипт для проверки IP-адресов по спам базам'
AUTHOR='(C) 2010 Roman (Angel2S2) Shagrov'
EMAIL='angel2s2ru@gmail.com'
JABBER='angel2s2ru@jabber.org'
BLOG='http://angel2s2.blogspot.com/'
LICENSE='GPLv3'
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#
# 
# Обо всех ошибках, замечаниях и предложениях пишите на angel2s2ru@gmail.com 
# или оставляйте комментарии в моем блоге http://angel2s2.blogspot.com/
# 

SED='/bin/sed'
WGET='/usr/bin/wget'
HOST='/usr/bin/host'
ICONV='/usr/bin/iconv -f UTF-8 '
PING='/bin/ping -c 1 '
DATE='/bin/date'
TOUCH='/bin/touch'
LOGGER='/usr/bin/logger'
HOSTNAME=$($SED "1q" /proc/sys/kernel/hostname) #'/bin/uname -n'

# "Вшитый" список DNSBL для проверки
DNSBL_LIST='abuse.rfc-ignorant.org access.redhawk.org aspews.ext.sorbs.net b.barracudacentral.org blackholes.brainerd.net blackholes.five-ten-sg.com blackholes.wirehub.net blacklist.junkemailfilter.com blacklist.sci.kun.nl blacklist.woody.ch bl.deadbeef.com bl.emailbasura.org block.dnsbl.sorbs.net bl.redhatgate.com bl.spamcannibal.org bl.spamcop.net bl.technovision.dk c10.rbl.hk cbl.abuseat.org cbl.anti-spam.org.cn cblless.anti-spam.org.cn cblplus.anti-spam.org.cn combined.njabl.org db.wpbl.info dialups.mail-abuse.org dialups.visi.com dnsbl-0.uceprotect.net dnsbl-1.uceprotect.net dnsbl-2.uceprotect.net dnsbl-3.uceprotect.net dnsbl.ahbl.org dnsbl.cyberlogic.net dnsbl.jammconsulting.com dnsbl.kempt.net dnsbl.njabl.org dnsbl.sorbs.net duinv.aupads.org dul.dnsbl.sorbs.net dul.ru fl.chickenboner.biz hil.habeas.com hostkarma.junkemailfilter.com http.dnsbl.sorbs.net http.opm.blitzed.org images.rbl.msrbl.net ips.backscatterer.org ircbl.ahbl.org ix.dnsbl.manitu.net korea.services.net l2.bbfh.ext.sorbs.net list.dnswl.org mail-abuse.blacklist.jippg.org map.spam-rbl.com misc.dnsbl.sorbs.net msgid.bl.gweep.ca multi.surbl.org multi.uribl.com no-more-funn.moensted.dk ohps.dnsbl.net.au omrs.dnsbl.net.au orid.dnsbl.net.au orvedb.aupads.org osps.dnsbl.net.au osrs.dnsbl.net.au owfs.dnsbl.net.au owps.dnsbl.net.au pbl.spamhaus.org phishing.rbl.msrbl.net probes.dnsbl.net.au proxy.bl.gweep.ca psbl.surriel.com query.bondedsender.org rbl.cluecentral.net rbl-plus.mail-abuse.org rbl.snark.net rdts.dnsbl.net.au relays.bl.gweep.ca relays.bl.kundenserver.de relays.mail-abuse.org relays.nether.net ricn.dnsbl.net.au rmst.dnsbl.net.au rot.blackhole.cantv.net rsbl.aupads.org satos.rbl.cluecentral.net sbl.csma.biz sbl.spamhaus.org sbl-xbl.spamhaus.org smtp.dnsbl.sorbs.net socks.dnsbl.sorbs.net socks.opm.blitzed.org sorbs.dnsbl.net.au spam.dnsbl.sorbs.net spamguard.leadmon.net spam.olsentech.net spamrbl.imp.ch spamsites.dnsbl.net.au spamsources.dnsbl.info spamsources.fabel.dk spam.wytnij.to t1.bl.dnsbl.net.au t1.dnsbl.net.au ubl.unsubscore.com ucepn.dnsbl.net.au virbl.bit.nl virbl.dnsbl.bit.nl virus.rbl.jp virus.rbl.msrbl.net web.dnsbl.sorbs.net whois.rfc-ignorant.org wingate.opm.blitzed.org wormrbl.imp.ch wpbl.dnsbl.net.au xbl.spamhaus.org zen.spamhaus.org zombie.dnsbl.sorbs.net rhsbl.sorbs.net'

# Параметры по умолчанию
IS_QUIET=0					# -q	- Ничего не выводить
IS_DNSBL_PRINT=0			# -l	- Вывести список dnsbl-серверов
IS_ONE_DNSBL=0				# -d	- Указатель, что надо проверить по указанному DNSBL
IS_FILE=0					# -f	- Указатель, что используется файл
IS_INET=0					# -i	- Сграбить список DNSBL с сайта http://myiptest.com/
IP_AND_FQDN_LIST=''			#		- Для временного хранения ip'шников и fqsn'ов
IP_LIST=''					#		- Тут будут все IP'шники 
MX_LIST=''					#		- Тут бубут все MX-записи (хранятся временно, для разрешения их в IP'шники)
IS_MY_DNS=0					#		  Чтобы знать, что надо использовать указанный юзером DNS-сервер
IS_TIME_OUT_ERROR=0			# -t	- Считать тайм ауты подключения к DNSBL ошибками и выводить в поток ошибок?
DNS_SERVER='208.67.222.222'	# -s	- DNS Server (OpenDNS.com), через который будет проверяться IP по DNSBL
RESOLVCONF='/etc/resolv.conf'
SHOW_IP_ONLY=0				# -p	- Только показать все IP'шники, которые будут проверены

USE_LOG=0				# --log [file]  - вести лог в файл, 
					# либо если файл не указан, проверить системные настройки ведения лога на наличие строк содержащих $LOG_TAG и использовать $LOGGER, 
					# иначе будет использован файл по умолчанию $LOG_FILE_DEFAULT
USE_SYSLOG=0				# --slog        - выводить в syslog, игнорируя системные настройки;
					# так же флаг устанавливается в случае если настроен вывод для $LOGGER (syslog, syslog-ng, rsyslog etc.)
LOG_TAG="spamcheck"			# строка маркировки в логе
LOG_FILE=''				# имя файла для лога
LOG_FILE_DEFAULT="./$LOG_TAG.log"	#"$($DATE +spamcheck-%Y%m%d-%H%M%S.log)" # имя файла лога по умолчанию



_output() {
# name		Конвертирует строку в текущую локаль из UTF-8 и выводит строку на стандартный поток либо поток ошибок
# $1		Строка, которую надо вывести (надо заключать в кавычки, если есть пробельные символы)
# $2		Куда выводить (stdout (1)  или stderr (2))
# output	Возвращает указанную строку ($1) выводя ее на stdout или stderr
# return	0

	# Если обычный режим, то выводим инфу на консоль, иначе просто все игнорируем
	# Вывод в любом случае будет перекодирован 
	local MSG=$(echo "$2" | $ICONV)
	if [ $IS_QUIET -eq 0 ] ; then
		if [ $1 -eq 2 ] ; then
			echo "$MSG" 1>&2
		else
			echo "$MSG"
		fi
	fi
	if [ $USE_SYSLOG -eq 1 ] ; then
		$LOGGER -t "$LOG_TAG" -- "$MSG"
	elif [ "$USE_LOG" -eq 1 ] ; then
		# можно добавить [$$] к $LOG_TAG, но pid будет постоянно разным
		$DATE +"%b %m %T $HOSTNAME $LOG_TAG: $MSG" >> "$LOG_FILE"
	fi
}

_version() {
# name		Версия, копирайт, лицензия, контакты
# output	--//--
# return	0 
	_output 1 "$SCRIPT_NAME, version $VERSION"
	_output 1 "Copyright $AUTHOR"
	_output 1 "License $LICENSE"
	_output 1 "Contacts: $EMAIL | $JABBER | $BLOG"
}

_usage() {
# name		"Правила" использования скрипта
# output	--//--
# return	0
	_output 1 "$SCRIPT_NAME [-q] [-l] [-d dnsbl | -f [+]filename | -i] [-s dns_server] [-t] [-w] [--] [ip or domain-name ...]"
}

_help() {
# name		Справка по использованию параметров скрипта
# output	--//--
# return	0
	_usage
	_output 1 ""
	_output 1 "   -q		- Ничего не выводить"
	_output 1 "   -l		- Показать список DNSBL-серверов"
	_output 1 "   -p		- Показать список IP, которые должны быть проверены"
	_output 1 "   -d		- Проверить по указанному DNSBL"
	_output 1 "   -f		- Взять список DNSBL-серверов из файла"
	_output 1 "   +<file>		- \"склеить\" базы из файла и \"вшитую\""
	_output 1 "   -i		- Сграбить список DNSBL с сайта http://myiptest.com/"
	_output 1 "   -s		- Указать DNS-сервер, через который будет идти проверка"
	_output 1 "   -t		- Считать Time Out'ы ошибкой"
	_output 1 "   --log [file]	- Вести отчет в file. Если file не указан, будет использован файл по умолчанию $LOG_FILE_DEFAULT"
	_output 1 "     		  Подробнее на http://code.google.com/p/spamcheck/wiki/logger"
	_output 1 "   --slog	- Игнорировать программные настройки и вести системное логгирование"
	_output 1 "   --		- Считается, что дальше идут только ip и/или доменные имена"
	_output 1 "   [ip or domain-name ...]	- ip и/или доменные имена, которые нужно проверить"
	_output 1 "   --version, --help, --usage	- без комментариев"
}

_bad_param() {
# name		Сообщение о не известном/не верном параметре переданном скрипту	
# output	--//--
# return	0
	_output 2 "Не известный параметр: $1"
}

_build_ip_list() {
# name		Все что передано, добавляет в $IP_AND_FQDN_LIST
# $1		ip-адрес
# output	none
# return	0
	IP_AND_FQDN_LIST="$IP_AND_FQDN_LIST $*"
}

___check_and_build_ip_list() {
	local HOST_RESULT
	# Заносим результат в переменную, для экономии трафика и повышения скорости работы скрипта
	HOST_RESULT=$($HOST $1 $DNS_SERVER)
	# Все полученные ip'шники кладем сюда...
	IP_LIST="$IP_LIST $(echo "$HOST_RESULT" | $SED -n '/address/s/.\+address\ \([0-9\.]\+\)/\1/gp')"
	# ...а сюда MX записи (или алиасы)
	MX_LIST="$MX_LIST $(echo "$HOST_RESULT" | $SED -n '/handled/s/.\+\ [0-9]\+\ \(.\+\)\./\1/p')"
}

_check_ip_list() {
# name		Читает переменную $IP_AND_FQDN_LIST, преобразовывает FQDN'ы в ip-адреса и заносит результат в переменную $IP_LIST
# output	none
# return	0
	local IS_IP
	for IP in $IP_AND_FQDN_LIST ; do
		IS_IP=$(echo $IP | $SED -n '/[^0-9\.]\+/p')
		# если пусто, значит у нас IP...
		if [ -z "$IS_IP" ] ; then 
			IP_LIST="$IP_LIST $IP"
		# ...иначе доменное имя
		else
			___check_and_build_ip_list $IP
		fi
	done
	# Вложенные циклы необходимы, чтобы получить IP'шники тех MX'ов, на запрос которых DNS возвращает другой MX
	# (очень редкий случай, но бывает)
	while [ -n "$MX_LIST" ] ; do
		for MX in $MX_LIST ; do
			# Удаляю из переменной уже проверенный MX (он будет первым в "массиве")
			MX_LIST=$(echo $MX_LIST | $SED 's/[\ \t]*[^\ \t]\+[\ \t]*//')
			___check_and_build_ip_list $MX
		done
		MX_LIST=$(echo $MX_LIST | $SED 's/^[\ \t]*//')
	done
}

_read_dnsbl() {
# name		Читает список DNSBL-серверов из файла и, если указано, объединяет со вшитой базой
# $1		Файл со списком DNSBL-серверов
# output	Сообщение в случае ошибки
# return	0
	local IS_ERROR
	local TMP_STR
	local TMP_FILE

	IS_ERROR=0
	if [ -n "$1" ] ; then
		# Выбираем из входной строки первый символ
		if [ "+" = "${1:0:1}" ] ; then
			# Выбираем из входной строки все, кроме первого символа
			set ${1/+}
			if [ -r "$1" ] ; then
				DNSBL_LIST="$DNSBL_LIST $($SED '/^[[:blank:]]*#/d;/^$/d' "$1")"
			else
				_output 2 "Файл $1 либо не существует, либо нет прав на чтение!"
				exit 1
			fi
		elif [ -r "$1" ] ; then
			DNSBL_LIST=$($SED '/^[[:blank:]]*#/d;/^$/d' "$1")
		else
			_output 2 "Файл $1 либо не существует, либо нет прав на чтение!"
			exit 1
		fi
		# эмуляция | uniq
		DNSBL_LIST="$(echo $DNSBL_LIST | $SED -e ':a; s/\(^[^ ]\+\.[^ .]\+\) \(.\+\) \1/\2 \1/; ta;')"
	else
		_output 2 "Тут не должно быть ошибки, но она есть... Напиши мне багрепорт, плиз."
		exit 1
	fi
}

_log_set() {
# name		Установка ведения лога
# output	Сообщение в случае ошибки
# return	Флаг ошибки
	local TMP_DIR
	# проверка на наличие в системных настройках ведения лога строк содержащих $LOG_TAG
	if [ -z "$LOG_FILE" -a -n "$($SED -ne "/^[[:blank:]]*#/d;/$LOG_TAG/p" /etc/*syslog*.conf)" ] ; then
		[ -e "$LOGGER" ] && USE_SYSLOG=1;
		return 0;
	fi

	[ -z "$LOG_FILE" ] && LOG_FILE="$LOG_FILE_DEFAULT"
	TMP_DIR=$(echo "$LOG_FILE" | $SED -e '/^[^\/\.]/s/^/\.\//;s/^\.[^\/]/\.\//;s/\(.*\)\/\([^\/].*\)/\1/;')
#	[ ! -e "$TMP_DIR" ] && mkdir -p "$TMP_DIR"
	if ! $TOUCH "$LOG_FILE" &> /dev/null ; then
		USE_LOG=0
		_output 2 "Ведение лога невозможно - нет прав на запись, либо каталог \"$TMP_DIR\" не существует"
		return 1
	fi
	return 0;
}

# Парсим параметры запуска
if [ $# -eq 0 ] ; then _help ; exit 1 ; fi
while [ $# -gt 0 ]; do
	case "$1" in
		"-q"	) IS_QUIET=1 ; shift ;;
		"-t"	) IS_TIME_OUT_ERROR=1 ; shift ;;
		"-f"	) IS_FILE=1 ; _read_dnsbl $2 ; shift 2 ;;
		"-i"	) IS_INET=1 ; DNSBL_LIST=$($WGET -q -O - 'http://www.myiptest.com/staticpages/index.php/check-Blacklisted-IP-DNSBL/'$DNS_SERVER | $SED -n '/href=.\+dnsbl=/s/^.\+dnsbl=\([a-zA-Z0-9\.\-]\+\).*$/\1/gp') ; shift ;;
		"-d"	) IS_ONE_DNSBL=1 ; DNSBL_LIST=$2 ; shift 2 ;;
		"-l"	) IS_DNSBL_PRINT=1 ; shift ;;
		"-s"	) IS_MY_DNS=1 ; DNS_SERVER=$2 ; shift 2 ;;
		"-p"	) SHOW_IP_ONLY=1 ; shift ;;
		# При добавлении/изменении имен параметров обновите строку для $SED
		"--log" ) USE_LOG=1 ; shift ; [ -n "$(echo "$1" | $SED -e '/^-[qtfidlsp-]$/d;/^--\(\|version\|help\|usage\|slog\|log\)$/d')" ] && LOG_FILE="$1" && shift ;;
		"--slog") USE_SYSLOG=1 ; shift ;;
		"--"	) shift ; _build_ip_list $* ; break ;;
		"--version"	) _version ; exit 255 ;;
		"--help"	) _help ; exit 255 ;;
		"--usage"	) _usage ; exit 255 ;;
		-*		) _bad_param $1 ; exit 1 ;;
		*		) _build_ip_list $1 ; shift ;;
	esac
done

# Обрабатываем параметр --log первым, дабы зафиксировать все
if [ "$USE_SYSLOG" -eq 0 -a "$USE_LOG" -eq 1 ] ; then
	_log_set || exit 1;
fi

# Список DNSBL-серверов заполнен?
if [ -z "$DNSBL_LIST" -a $IS_INET -eq 1 ] ; then _output 2 'Список DNSBL-серверов пуст! Видать не удалось подкючиться к северу.' ; fi
if [ -z "$DNSBL_LIST" -a $IS_FILE -eq 1 ] ; then _output 2 'Список DNSBL-серверов пуст! Видать файл пустой.' ; fi
if [ -z "$DNSBL_LIST" ] ; then _output 2 'Список DNSBL-серверов пуст! Ты случаем в скрипте переменную $DNSBL_LIST не удалил?' ; fi


_bad_params_combine() {
# name		Выводит сообщение "Не совместимые параметры!"
# output	--//--
# return	0
	_output 2 "Не совместимые параметры!"
	exit 1
}

# Проверка на (не)совместимость параметров
if [ $IS_DNSBL_PRINT -gt 0 -a $IS_QUIET -gt 0 ] ; then _bad_params_combine ; fi
if [ $IS_FILE -gt 0 -a $IS_INET -gt 0 ] ; then _bad_params_combine ; fi
if [ $IS_FILE -gt 0 -a $IS_ONE_DNSBL -gt 0 ] ; then _bad_params_combine ; fi
if [ $IS_ONE_DNSBL -gt 0 -a $IS_INET -gt 0 ] ; then _bad_params_combine ; fi

# Вывод списка DNSBL серверов, если на то был "запрос"
if [ $IS_DNSBL_PRINT -gt 0 ] ; then echo "$DNSBL_LIST" | $SED 's/\ /\n/g;/^$/d' ; exit 0 ; fi

_reverse_ip() {
# name		"Переворачивает" переданный ip-адрес и возвращает его
# $1		ip-адрес
# output	"Перевернутый" ip-адрес
# return	0
	echo $1 | $SED -e 's/$/\n/;:z;s/\([0-9]\{1,3\}\)\([^\n]*\n\)/\2\1./;tz;s/.*\n//;s/.$//'
}

_get_and_parse_dnsbl_return() {
# name		Получает ответ от DNSBL сервера, парсит его и выводим соответствующую информацию
# $1		"Перевернутый" ip-адрес для проверки
# output	Сообщение о результате проверки
# return	0 or 1
	for DNSBL in $DNSBL_LIST ; do
		GPD=$($HOST -t A $1.$DNSBL $DNS_SERVER)
		RES_A=$(echo "$GPD" | $SED -n '/not\ found/p')
		# Нас нет в DNSBL :)
		if [ -n "$RES_A" ] ; then
			_output 1 "[ OK ]         - $DNSBL		- $(echo $RES_A | $SED 's/^.*\(not\ found.\+$\)/\1/')"
		else
			RES_A=$(echo "$GPD" | $SED -n '/\ has\ address\ /s/^.*address\ \([0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\).*$/\1/p')
			# Черт... У нас проблемы :(
			if [ -n "$RES_A" ] ; then
				# Узнаем подробности
				RES_TXT=$($HOST -t TXT $1.$DNSBL $DNS_SERVER | $SED -n '/text/s/^.*\"\(.\+\)\".*$/\1/p')
				_output 2 "[ +++SPAM+++ ] - $DNSBL		- ($RES_A) $RES_TXT"
				RETURN_CODE=1
			else
				# Или может мы просто не можем достучаться до DNSBL-сервера?
				RES_A=$(echo "$GPD" | $SED -n '/connection timed out/p')
				if [ -n "$RES_A" ] ; then
					if [ $IS_TIME_OUT_ERROR -gt 0 ] ; then
						_output 2 "[ ERROR ]      - $DNSBL		- connection time out"
					 	RETURN_CODE=1
					else
						_output 1 "[ ERROR ]      - $DNSBL		- connection time out"
					fi
				else
					_output 2 'Странно... Ты не должен был этого видеть... о_О Напиши мне багрепорт, плиз, укажи версии sh, sed, host и самого скрипта, а так же какая у тебя ось и какие параметры были переданы скрипту. Заранее спасибо. Мое мыло: angel2s2ru@gmail.com'
					RETURN_CODE=1
				fi
			fi
		fi
		done
		return $RETURN_CODE
}

# Если юзер не указал свой dns-сервер и...
if [ $IS_MY_DNS -eq 0 ] ; then
# Если есть в системе resolv.conf...
	if [ -r $RESOLVCONF ] ; then 
		# ...выдираем из него IP'шники DNS-серверов...
		NS=$($SED -n '/nameserver/s/nameserver[\ \t]\+\([0-9\.]\+\)/\1/p' $RESOLVCONF)
		# ...и проверяем их на доступность...
		for NS_CURRENT in $NS ; do
			# ...если хоть один доступен...
			$PING $NS_CURRENT >/dev/null 2>&1
			if [ $? -eq 0 ] ; then
				# ...то будем юзать его
				DNS_SERVER=$NS_CURRENT
				break
			fi
		done
	fi	# В противном случае будет использоваться DNS-сервер по дефолту (см. переменную $DNS_SERVER в разделе "Параметры по умолчанию")
fi

_check_ip_list

# Только показать все IP'шники, которые будут проверены
if [ $SHOW_IP_ONLY -eq 1 ] ; then
	echo $IP_LIST | $SED 's/\ /\n/g'
	exit 0
fi

# IP указан?
if [ -z "$IP_LIST" ] ; then _output 2 "Не указаны адреса для проверки!" ; exit 1 ; fi

for IP in $IP_LIST ; do
	# Получаем "перевернутый" IP
	R_IP=$(_reverse_ip $IP)
	_output 1 "------------------------------------------$IP------------"
	# Проверяем наши IP по спам-базам и выводим результат на консоль
	_get_and_parse_dnsbl_return $R_IP
	EXIT_CODE=$?
done
exit $EXIT_CODE

